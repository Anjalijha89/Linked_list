package com.company;

public class Alpha_LinkedList {
    public static class Node
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;
    // 1.Add first
    public void Addfirst(int data)
    {
        //step 1: Create new node
        Node newnode = new Node(data);
        size++;
        if(head == null)
        {
            head=tail=newnode;
            return;
        }
        //step 2:
        newnode.next = head;
        //step 3;
        head = newnode;
    }

    //2.Add last
    public void Addlast(int data)
    {
        Node newnode = new Node(data);
        size++;
        if(head == null)
        {
            head=tail=newnode;
            return;
        }
        tail.next = newnode;
        tail=newnode;

    }
    //3.print
    public void print()
    {
        if(head == null)
        {
            System.out.println("LL is Empty");
            return;
        }
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");

    }
    //4. Add in middle
    public void Addmid(int idx , int data)
    {
        if(idx == 0)
        {
            Addfirst(data);
            return;
        }
        Node newnode = new Node(data);
        size++;
        Node temp = head;
        int i=0;
        while(i < idx-1)
        {
             temp = temp.next;
             i++;
        }
        newnode.next = temp.next;
        temp.next = newnode;
    }

    //6. remove first
    public int removefirst()
    {
        if(size==0)
        {
            System.out.println("LL is empty");
            return Integer.MIN_VALUE;
        }
        else if(size==1)
        {
            int val = head.data;
            head=tail=null;
            size=0;
            return val;
        }
        int val = head.data;
        head=head.next;
        size--;
        return val;
    }
    //7.REMOVE LAST
    public int removelast()
    {
        if(size == 0)
        {
            System.out.println("LL is empty");
            return Integer.MIN_VALUE;

        }
        else if(size==1)
        {
            int val=head.data;
            head=tail=null;
            size = 0;
            return val;
        }
        Node prev = head;
        for(int i=0;i<size-2;i++)
        {
           prev = prev.next;
        }
        int val = prev.next.data;
        prev.next=null;
        tail=prev;
        size--;
        return val;
    }

    //Iterative search
    public int itrsearch(int key)
    {
        Node temp = head;
        int i=0;
        while(temp != null)
        {
            if(temp.data==key)
            {
                return i;
            }
            temp=temp.next;
            i++;
        }
        return -1;
    }

    //reverse

    public void reverse()
    {
        Node prev = null;
        Node curr = tail = head;
        Node next;
        while(curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }

    //remove nth node
    public void deletenthnode(int n)
    {
        //calculate size
        int size = 0;
        Node temp = head;
        while(temp != null)
        {
            temp = temp.next;
            size++;
        }
        if(n==size)
        {
            head = head.next;
            return;
        }
        //Size-n
        int i=1;
        int indextofind = size-n;
        Node prev = head;
        while(i<indextofind )
        {
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
        return;
    }

    //palindrome
    public Node findmid(Node head)
    {
        Node slow=head;
        Node fast=head;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;  // slow=mid
    }
    public boolean checkpalindrome() {
        if (head == null && head.next == null) {
            return true;
        }
        //find mid
        Node midnode = findmid(head);
        //reverse 2nd half
        Node prev = null;
        Node curr = midnode;
        Node next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        Node right = prev;
        Node left = head;
        while (right != null) {
            if (right.data != left.data) {
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;
    }

    // Cycle
    public static boolean iscycle()
    {
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)
            {
                return true;  //cycle exist
            }
        }
        return false;    //cycle not exist
    }

    //Remove cycle
    public static void removecycle()
    {
        //detect cycle
        Node slow = head;
        Node fast = head;
        boolean cycle = false;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow)
            {
                cycle = true;
                break;
            }
        }
        if(cycle == false)
        {
            return;
        }
        //find meeting point
        slow = head;
        Node prev = null; //last node
        while(slow != fast)
        {
            prev = fast;
            slow = slow.next;
            fast = fast.next;
        }
        //remove cycle
        prev.next=null;
    }

    //p-1 Merge sort on ll
    private Node getMid(Node head)
    {
        Node slow = head;
        Node fast = head.next;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow; //mid
    }
    private Node merge(Node head1,Node head2)
    {
        Node mergedll = new Node(-1);
        Node temp = mergedll;
        while(head1 != null && head2 != null)
        {
            if(head1.data <= head2.data)
            {
                temp.next = head1;
                head1 = head1.next;
                temp = temp.next;
            }
            else
            {
                temp.next = head2;
                head2 = head2.next;
                temp = temp.next;
            }
        }
        while(head1 != null)
        {
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }
        while(head2 != null)
        {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }
        return mergedll.next;
    }

    public Node mergesort(Node head)
    {
        if(head == null || head.next == null)
        {
            return head;
        }
        //Find mid
        Node mid = getMid(head);
        //lf & right merge
        Node rightHead = mid.next;
        mid.next = null;
        Node newleft = mergesort(head);
        Node newright = mergesort(rightHead);
        //MERGE
        return merge(newleft,newright);
    }



    //p-2 Zig-zag ll
    public void zigzag()
    {
        //find mid
        Node slow = head;
        Node fast = head.next;
        while(fast != null && fast.next != null )
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node mid = slow;
        //reverse 2nd half
        Node curr = mid.next;
        mid.next = null;
        Node prev = null;
        Node next;
        while(curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        Node left = head;
        Node right = prev;
        Node nextl , nextr;
        //merge
        while(left != null && right != null)
        {
            nextl = left.next;
            left.next = right;
            nextr = right.next;
            right.next = nextl;
            left = nextl;
            right = nextr;
        }
    }



    public static void main(String args[])
    {
         Alpha_LinkedList ll = new Alpha_LinkedList();
         /*
       // ll.Addfirst(2);
       // ll.Addfirst(1);
        //ll.Addlast(3);
        //ll.Addlast(4);
       // ll.Addmid(2,8);
       // ll.print();
        //ll.removefirst();
       // ll.print();
       // ll.removelast();
       // ll.print();
        //System.out.println(ll.size);
       // System.out.println(ll.itrsearch(8));
       // System.out.println(ll.itrsearch(77));
        //ll.reverse();
       // ll.print();
        //ll.deletenthnode(3);
       // ll.print();

        ll.Addlast(1);
        ll.Addlast(2);
        ll.Addlast(2);
        ll.Addlast(1);
        ll.print();
        System.out.println(ll.checkpalindrome());



        //cycle
        head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = head;
        System.out.println(iscycle());



        //remove cycle
        head = new Node(1);
        Node temp = new Node(2);
        head.next = temp;
        head.next.next = new Node(3);
        head.next.next.next = temp;
        System.out.println(iscycle());
        removecycle();
        System.out.println(iscycle());


        //merge sort
        ll.Addfirst(1);
        ll.Addfirst(2);
        ll.Addfirst(3);
        ll.Addfirst(4);
        ll.Addfirst(5);
        ll.print();
       ll.head = ll.mergesort(ll.head);
       ll.print();

          */

        //zig-zag
        ll.Addlast(1);
        ll.Addlast(2);
        ll.Addlast(3);
        ll.Addlast(4);
        ll.Addlast(5);
        ll.Addlast(6);
        ll.print();
        ll.zigzag();
        ll.print();






    }
}
